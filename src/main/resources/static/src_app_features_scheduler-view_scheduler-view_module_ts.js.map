{"version":3,"file":"src_app_features_scheduler-view_scheduler-view_module_ts.js","mappings":"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","sources":["./src/app/components/weekly-scheduler/weekly-scheduler.component.ts","./src/app/components/weekly-scheduler/weekly-scheduler.component.html","./src/app/components/weekly-scheduler/weekly-scheduler.module.ts","./src/app/features/scheduler-view/scheduler-view-routing.module.ts","./src/app/features/scheduler-view/scheduler-view.component.ts","./src/app/features/scheduler-view/scheduler-view.component.html","./src/app/features/scheduler-view/scheduler-view.module.ts","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WeeklySchedulerConfig, WeeklySchedulerData } from './types/weekly-scheduler.types';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\n\n@Component({\n  selector: 'weekly-scheduler',\n  templateUrl: './weekly-scheduler.component.html',\n  styleUrls: ['./weekly-scheduler.component.scss']\n})\nexport class WeeklySchedulerComponent implements OnInit {\n\n  public weeklySchedulerConfig: WeeklySchedulerConfig = {\n    hoursInterval: ['8:00', '10:00', '12:00', '14:00', '16:00', '17:30'],\n    labelsOfDays: [\n      'Luni', 'Marti', 'Miercuri', 'Joi', 'Vineri'\n    ]\n  }\n\n  public weeklySchedulerData: WeeklySchedulerData[] = [\n    {\n      dayOfWeek: 1,\n      startsAt: '8:00',\n      title: 'Fotbal',\n      by: 'Andrei Molcut',\n      at: 'Baza 2',\n      metadata: '9/30',\n      color: 'green'\n    },\n    {\n      dayOfWeek: 3,\n      startsAt: '12:00',\n      title: 'Fotbal',\n      by: 'Andrei Molcut',\n      at: 'Baza 2',\n      metadata: '7/30',\n      color: 'green'\n    },\n    {\n      dayOfWeek: 5,\n      startsAt: '14:00',\n      title: 'Fotbal',\n      by: 'Andrei Molcut',\n      at: 'Baza 2',\n      metadata: '5/20',\n      color: 'green'\n    },\n    {\n      dayOfWeek: 3,\n      startsAt: '17:30',\n      title: 'Fotbal',\n      by: 'Andrei Molcut',\n      at: 'Baza 2',\n      metadata: '5/20',\n      color: 'green'\n    },\n    {\n      dayOfWeek: 2,\n      startsAt: '12:00',\n      title: 'Fotbal',\n      by: 'Andrei Molcut',\n      at: 'Baza 2',\n      metadata: '5/20',\n      color: 'green'\n    },\n    {\n      dayOfWeek: 2,\n      startsAt: '12:00',\n      title: 'Fotbal',\n      by: 'Andrei Molcut',\n      at: 'Baza 2',\n      metadata: '5/20',\n      color: 'green'\n    }\n  ]\n\n  public hoursInterval!: string[];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.hoursInterval = this.weeklySchedulerConfig.hoursInterval;\n  }\n\n  get labelOfDays(): string[] {\n    return this.weeklySchedulerConfig.labelsOfDays;\n  }\n\n  drop(event: CdkDragDrop<WeeklySchedulerData[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex);\n    }\n    console.log(\"hello\");\n  }\n\n}\n","<div class=\"weekly-scheduler\">\n    <div class=\"weekly-scheduler__days\">\n        <div class=\"spacer\">\n\n        </div>\n        <div class=\"weekly-scheduler__days__day\" *ngFor=\"let day of labelOfDays\">\n            {{day}}\n        </div>\n    </div>\n    <div class=\"weekly-scheduler__hours\" cdkDropListGroup>\n        <div class=\"weekly-scheduler__hours__section\" *ngFor=\"let hour of hoursInterval\">\n            <div class=\"hour\">\n                {{hour}}\n            </div>\n            <div class=\"weekly-scheduler__hours__section__schedule\" *ngFor=\"let day of labelOfDays; let i = index\">\n                <div cdkDropList [cdkDropListData]=\"weeklySchedulerData\" (cdkDropListDropped)=\"drop($event)\"\n                    *ngFor=\"let data of weeklySchedulerData\">\n                    <ng-container *ngIf=\"data.dayOfWeek === i + 1 && data.startsAt === hour\">\n                        <div cdkDrag class=\"schedule-container\" [style.background]=\"data.color\">\n                            <div class=\"title\">\n                                {{data.title}} - {{data.by}}\n                            </div>\n                            <div class=\"at\">\n                                {{data.at | uppercase}}\n                            </div>\n                            <div class=\"metadata\">\n                                {{data.metadata}}\n                            </div>\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WeeklySchedulerComponent } from './weekly-scheduler.component';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\n@NgModule({\n    declarations: [\n        WeeklySchedulerComponent\n    ],\n    imports: [\n        CommonModule,\n        DragDropModule\n    ],\n    exports: [\n        WeeklySchedulerComponent\n    ]\n})\nexport class WeeklySchedulerModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SchedulerViewComponent } from './scheduler-view.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: SchedulerViewComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class SchedulerViewRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-scheduler-view',\n  templateUrl: './scheduler-view.component.html',\n  styleUrls: ['./scheduler-view.component.scss']\n})\nexport class SchedulerViewComponent {\n\n}\n","<div class=\"scheduler-view\">\n    <weekly-scheduler></weekly-scheduler>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SchedulerViewComponent } from './scheduler-view.component';\nimport { SchedulerViewRoutingModule } from './scheduler-view-routing.module';\nimport { WeeklySchedulerModule } from 'src/app/components/weekly-scheduler/weekly-scheduler.module';\n\n\n\n@NgModule({\n  declarations: [\n    SchedulerViewComponent\n  ],\n  imports: [\n    CommonModule,\n    SchedulerViewRoutingModule,\n    WeeklySchedulerModule\n  ]\n})\nexport class SchedulerViewModule { }\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Optional, SkipSelf, Input, EventEmitter, Self, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"names":["moveItemInArray","transferArrayItem","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","day_r2","ɵɵelementContainerStart","ɵɵelementContainerEnd","ɵɵstyleProp","data_r8","color","ɵɵtextInterpolate2","title","by","ɵɵpipeBind1","at","metadata","ɵɵlistener","WeeklySchedulerComponent_div_5_div_3_div_1_Template_div_cdkDropListDropped_0_listener","$event","ɵɵrestoreView","_r12","ctx_r11","ɵɵnextContext","ɵɵresetView","drop","ɵɵtemplate","WeeklySchedulerComponent_div_5_div_3_div_1_ng_container_1_Template","ɵɵproperty","ctx_r7","weeklySchedulerData","dayOfWeek","i_r6","startsAt","hour_r3","WeeklySchedulerComponent_div_5_div_3_div_1_Template","ctx_r4","WeeklySchedulerComponent_div_5_div_3_Template","ctx_r1","labelOfDays","WeeklySchedulerComponent","constructor","weeklySchedulerConfig","hoursInterval","labelsOfDays","ngOnInit","event","previousContainer","container","data","previousIndex","currentIndex","console","log","selectors","decls","vars","consts","template","WeeklySchedulerComponent_Template","rf","ctx","ɵɵelement","WeeklySchedulerComponent_div_3_Template","WeeklySchedulerComponent_div_5_Template","CommonModule","DragDropModule","WeeklySchedulerModule","declarations","imports","exports","RouterModule","SchedulerViewComponent","routes","path","component","SchedulerViewRoutingModule","forChild","i1","SchedulerViewComponent_Template","SchedulerViewModule","asyncScheduler","timer","interval","period","scheduler","Injectable","Inject","InjectionToken","Directive","Optional","SkipSelf","Input","EventEmitter","Self","ContentChildren","ContentChild","Output","NgModule","DOCUMENT","CdkScrollableModule","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","coerceBooleanProperty","coerceElement","coerceNumberProperty","coerceArray","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","Subject","Subscription","animationFrameScheduler","Observable","merge","takeUntil","map","take","startWith","tap","switchMap","i1$1","extendStyles","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","target","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","Set","DragRef","disabled","_disabled","_dropContainer","newValue","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","_getTargetHandle","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","add","withPreviewTemplate","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","isPointerOverContainer","_isOverContainer","item","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","zIndex","classList","setAttribute","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","array","fromIndex","toIndex","from","clamp","to","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","a","b","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","floor","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","pipe","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","draggedItems","filter","every","connectedTo","withOrientation","_scrollableElements","size","_clientRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","initiator","receiver","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","ngOnDestroy","instance","_class","ɵfac","_class_Factory","t","ɵɵinject","NgZone","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","args","decorators","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","_class2","_class2_Factory","ViewportRuler","CDK_DRAG_PARENT","assertElementNode","Error","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","parentDrag","_parentDrag","_class3","_class3_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","hostAttrs","inputs","standalone","features","ɵɵProvidersFeature","provide","useExisting","host","providers","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","_class4","_class4_Factory","TemplateRef","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","_class5","_class5_Factory","CDK_DRAG_CONFIG","DRAG_HOST_CLASS","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","subscription","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","rootElementSelector","closest","_getBoundaryElement","boundary","ref","dir","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","childHandleElements","handleInstance","dragRef","_class6","_class6_Factory","ViewContainerRef","Directionality","ChangeDetectorRef","contentQueries","_class6_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","_class6_HostBindings","ɵɵclassProp","outputs","exportAs","ɵɵNgOnChangesFeature","descendants","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","_class7","_class7_Factory","_uniqueIdCounter","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","getSortedItems","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","correspondingDropList","list","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","_class8","_class8_Factory","ScrollDispatcher","_class8_HostBindings","ɵɵattribute","useValue","DRAG_DROP_DIRECTIVES","_class9","_class9_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector"],"sourceRoot":"webpack:///","x_google_ignoreList":[7,8]}